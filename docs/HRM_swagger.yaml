swagger: '2.0'
info:
  version: '1.0'
  title: HRM_Project
  contact: {}
host: localhost:8081
basePath: /api
securityDefinitions:
  token:
    type: apiKey
    description: ''
    name: token
    in: header
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    post:
      summary: create new user
      tags:
        - User API
      operationId: createnewuser
      deprecated: false
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: roleId
          in: formData
          required: true
          type: string
          description: ''
        - name: employeeId
          in: formData
          required: true
          type: string
          description: ''
        - name: managerId
          in: formData
          required: true
          type: string
          description: ''
        - name: firstName
          in: formData
          required: true
          type: string
          description: ''
        - name: lastName
          in: formData
          required: true
          type: string
          description: ''
        - name: email
          in: formData
          required: true
          type: string
          description: ''
        - name: phone
          in: formData
          required: true
          type: string
          description: ''
        - name: avatar
          in: formData
          required: true
          type: string
          description: ''
        - name: address
          in: formData
          required: true
          type: string
          description: ''
        - name: department
          in: formData
          required: true
          type: string
          description: ''
        - name: identificationNumber
          in: formData
          required: true
          type: integer
          format: int32
          description: ''
        - name: insuranceNumber
          in: formData
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all user
      tags:
        - User API
      operationId: getalluser
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  '/users/{id}':
    patch:
      summary: delete user by id
      tags:
        - User API
      operationId: deleteuserbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get user by id
      tags:
        - User API
      operationId: getuserbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /userroles:
    post:
      summary: create new userrole
      tags:
        - UserRole API
      operationId: createnewuserrole
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewuserrolerequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all user-role
      tags:
        - UserRole API
      operationId: getalluser-role
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  '/userroles/{id}':
    patch:
      summary: update userrole
      tags:
        - UserRole API
      operationId: updateuserrole
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/updateuserrolerequest'
      responses:
        '200':
          description: ''
          headers: {}
  /roles:
    post:
      summary: create new role
      tags:
        - Role API
      operationId: createnewrole
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewrolerequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get role of user when login
      tags:
        - Role API
      operationId: getroleofuserwhenlogin
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  '/roles/{id}':
    patch:
      summary: delete role
      tags:
        - Role API
      operationId: deleterole
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /roleids:
    get:
      summary: test get role by id in token
      tags:
        - Role API
      operationId: testgetrolebyidintoken
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  /roles/all:
    get:
      summary: get all role
      tags:
        - Role API
      operationId: getallrole
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /rolepermissions:
    post:
      summary: create new role permission
      tags:
        - RolePermission API
      operationId: createnewrolepermission
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewrolepermissionrequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all role-permission
      tags:
        - RolePermission API
      operationId: getallrole-permission
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  '/rolePermissions/{id}':
    patch:
      summary: delete rolePermission
      tags:
        - RolePermission API
      operationId: deleterolePermission
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /modules:
    post:
      summary: create new module
      tags:
        - Module API
      operationId: createnewmodule
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewmodulerequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all module
      tags:
        - Module API
      operationId: getallmodule
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  '/modules/{id}':
    patch:
      summary: delete module
      tags:
        - Module API
      operationId: deletemodule
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get module by id
      tags:
        - Module API
      operationId: getmodulebyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /forms:
    post:
      summary: create new form
      tags:
        - Form API
      operationId: createnewform
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewformrequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all form of user by userId in token
      tags:
        - Form API
      operationId: getallformofuserbyuserIdintoken
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      summary: submit form (employee)
      tags:
        - Form API
      operationId: submitform(employee)
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/submitform%28employee%29request'
      responses:
        '200':
          description: ''
          headers: {}
  '/forms/{id}':
    patch:
      summary: delete form by id
      tags:
        - Form API
      operationId: deleteformbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get form by id
      tags:
        - Form API
      operationId: getformbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /reports/basic/finish:
    get:
      summary: get  report finish basic finish
      tags:
        - Form API
      operationId: getreportfinishbasicfinish
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  /reports/yearly/finish:
    get:
      summary: get report finish yearly form
      tags:
        - Form API
      operationId: getreportfinishyearlyform
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  /reports/yearly/incomplete:
    get:
      summary: get report incomplete yearly form
      tags:
        - Form API
      operationId: getreportincompleteyearlyform
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  /reports/basic/incomplete:
    get:
      summary: get report incomplete basic form
      tags:
        - Form API
      operationId: getreportincompletebasicform
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  '/forms/{id}/approve':
    patch:
      summary: approve form of user
      tags:
        - Form API
      operationId: approveformofuser
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/approveformofuserrequest'
      responses:
        '200':
          description: ''
          headers: {}
  '/forms/{id}/closed':
    patch:
      summary: close form by HR
      tags:
        - Form API
      operationId: closeformbyHR
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /forms/all:
    get:
      summary: get all form
      tags:
        - Form API
      operationId: getallform
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /accounts:
    post:
      summary: create new account
      tags:
        - Account API
      operationId: createnewaccount
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/createnewaccountrequest'
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get all account
      tags:
        - Account API
      operationId: getallaccount
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: currentPage
          in: query
          required: true
          type: integer
          format: int32
          description: ''
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  '/accounts/{id}':
    patch:
      summary: delete account by id
      tags:
        - Account API
      operationId: deleteaccountbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    get:
      summary: get account by id
      tags:
        - Account API
      operationId: getaccountbyid
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /signins:
    post:
      summary: Login
      tags:
        - Misc
      operationId: Login
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: ''
          headers: {}
  /sendmails:
    post:
      summary: test send mail
      tags:
        - Misc
      operationId: testsendmail
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/testsendmailrequest'
      responses:
        '200':
          description: ''
          headers: {}
definitions:
  createnewuserrolerequest:
    title: createnewuserrolerequest
    example:
      userId: b8552298-7075-45bb-9fc1-4f9e28c127a1
      roleId: 258c3db8-5a98-40e4-94bc-753c2c0eb73c
    type: object
    properties:
      userId:
        type: string
      roleId:
        type: string
    required:
      - userId
      - roleId
  updateuserrolerequest:
    title: updateuserrolerequest
    example:
      userId: 8b8ba587-5ec4-4bac-aab7-4923f7af447e
      roleId: 258c3db8-5a98-40e4-94bc-753c2c0eb73c
    type: object
    properties:
      userId:
        type: string
      roleId:
        type: string
    required:
      - userId
      - roleId
  createnewrolerequest:
    title: createnewrolerequest
    example:
      roleName: demo
    type: object
    properties:
      roleName:
        type: string
    required:
      - roleName
  updaterolebyidrequest:
    title: updaterolebyidrequest
    example:
      roleName: demo-update
    type: object
    properties:
      roleName:
        type: string
    required:
      - roleName
  createnewrolepermissionrequest:
    title: createnewrolepermissionrequest
    example:
      roleId: 1de057e3-9867-4bbe-b0ad-7c509151f226
      moduleId: 6b33259f-fcb2-4178-ab81-589cd894f9f4
      url: /roles
      canRead: 1
      canWrite: 0
      canUpdate: 0
      canDelete: 0
      canApprove: 0
    type: object
    properties:
      roleId:
        type: string
      moduleId:
        type: string
      url:
        type: string
      canRead:
        type: integer
        format: int32
      canWrite:
        type: integer
        format: int32
      canUpdate:
        type: integer
        format: int32
      canDelete:
        type: integer
        format: int32
      canApprove:
        type: integer
        format: int32
    required:
      - roleId
      - moduleId
      - url
      - canRead
      - canWrite
      - canUpdate
      - canDelete
      - canApprove
  updaterolePermissionbyidRequest:
    title: updaterolePermissionbyidRequest
    example:
      roleId: faafd1f0-518f-4fe4-ae36-654d67da1562
      moduleId: aa221bae-884e-4d41-8ca5-f2d36beeab8c
      canRead: 1
      canWrite: 1
      canUpdate: 0
      canDelete: 0
      canApprove: 0
    type: object
    properties:
      roleId:
        type: string
      moduleId:
        type: string
      canRead:
        type: integer
        format: int32
      canWrite:
        type: integer
        format: int32
      canUpdate:
        type: integer
        format: int32
      canDelete:
        type: integer
        format: int32
      canApprove:
        type: integer
        format: int32
    required:
      - roleId
      - moduleId
      - canRead
      - canWrite
      - canUpdate
      - canDelete
      - canApprove
  createnewmodulerequest:
    title: createnewmodulerequest
    example:
      moduleName: test
    type: object
    properties:
      moduleName:
        type: string
    required:
      - moduleName
  updatemodulebyidrequest:
    title: updatemodulebyidrequest
    example:
      moduleName: role
    type: object
    properties:
      moduleName:
        type: string
    required:
      - moduleName
  createnewformrequest:
    title: createnewformrequest
    example:
      userId:
        - 2b105106-25ed-49d1-8bb5-d0d1001d5793
        - 8b8ba587-5ec4-4bac-aab7-4923f7af447e
        - 9b878523-8f7c-4e8e-8ce0-bc9ae261a19f
        - fbd0d11c-6ae5-46f9-bd84-87e496a142f5
        - cab64ec3-e333-4675-985e-1c7cde4b444b
      typeOf: yearly
    type: object
    properties:
      userId:
        type: array
        items:
          type: string
      typeOf:
        type: string
    required:
      - userId
      - typeOf
  approveformofuserrequest:
    title: approveformofuserrequest
    example:
      managerComment: Ok Done
    type: object
    properties:
      managerComment:
        type: string
    required:
      - managerComment
  submitform(employee)request:
    title: submitform(employee)request
    example:
      managerId: ac3a4c4b-1037-427d-a0ad-c3b2029c709b
      note: So many
      task: Many
      achievement: 'Nothing '
    type: object
    properties:
      managerId:
        type: string
      note:
        type: string
      task:
        type: string
      achievement:
        type: string
    required:
      - managerId
      - note
      - task
      - achievement
  createnewaccountrequest:
    title: createnewaccountrequest
    example:
      userId: cab64ec3-e333-4675-985e-1c7cde4b444b
      username: employee3
      password: director01
    type: object
    properties:
      userId:
        type: string
      username:
        type: string
      password:
        type: string
    required:
      - userId
      - username
      - password
  updateaccountbyidrequest:
    title: updateaccountbyidrequest
    example:
      userId: cab64ec3-e333-4675-985e-1c7cde4b444b
      username: employee3
      password: employee01
    type: object
    properties:
      userId:
        type: string
      username:
        type: string
      password:
        type: string
    required:
      - userId
      - username
      - password
  LoginRequest:
    title: LoginRequest
    example:
      username: manager
      password: manager01
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  testsendmailrequest:
    title: testsendmailrequest
    example:
      to: vanvd@vmodev.com
      subject: test nodemail
      body: Hello boy
    type: object
    properties:
      to:
        type: string
      subject:
        type: string
      body:
        type: string
    required:
      - to
      - subject
      - body
security:
  - token: []
tags:
  - name: User API
  - name: UserRole API
  - name: Role API
  - name: RolePermission API
  - name: Module API
  - name: Form API
  - name: Account API
  - name: Misc
    description: ''
